#!/bin/bash
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/00-config.sh"

section "Step 9: Starting Supabase Services"

log "${CYAN}This script will start ALL Supabase services:${NC}"
log "  - PostgreSQL Database"
log "  - Kong API Gateway"
log "  - GoTrue (Auth)"
log "  - PostgREST (REST API)"
log "  - Realtime subscriptions"
log "  - Storage API"
log "  - ${GREEN}Supavisor (Connection Pooler)${NC} ← ENABLED!"
log "  - Studio (Dashboard)"
log "  - Meta API"
log "  - Edge Functions"
log "  - Vector Analytics"
log ""
read -p "Press Enter to start services..."

cd "$DOCKER_PATH"

subsection "Verifying Supavisor Configuration"
if grep -q "^  supavisor:" docker-compose.yml 2>/dev/null; then
    success "Supavisor is enabled in docker-compose.yml"
    info "All encryption keys configured correctly:"
    log "  ✓ VAULT_ENC_KEY: 64 hex chars"
    log "  ✓ POOLER_TENANT_ID: configured"
    log "  ✓ Pool sizes: configured"
else
    warning "Supavisor not found in docker-compose.yml"
fi

log ""
subsection "Stopping Existing Services"
info "Stopping any running containers..."
docker compose down
sleep 3
success "Services stopped"

log ""
subsection "Starting All Services (Including Supavisor)"
info "Starting services in background..."
docker compose up -d

log ""
info "Waiting for services to initialize..."
log "${YELLOW}This may take 30-60 seconds for all health checks to pass${NC}"
log ""

# Progress indicator
for i in {1..30}; do
    echo -n "."
    sleep 1
done
log ""

# Check service status
log ""
subsection "Checking Service Status"
docker compose ps

log ""
subsection "Creating Admin User"
if [ -f /tmp/create_admin_user.sql ]; then
    info "Creating admin user in database..."
    if docker exec -i supabase-db psql -U postgres -d postgres < /tmp/create_admin_user.sql 2>&1 | grep -q "Admin user ready"; then
        success "Admin user created successfully"
    else
        warning "Admin user may already exist"
    fi
else
    warning "Admin user script not found"
fi

log ""
subsection "JWT Token Information"
log "${YELLOW}═══════════════════════════════════════════════════════════${NC}"
log "${YELLOW}IMPORTANT: JWT Tokens${NC}"
log "${YELLOW}═══════════════════════════════════════════════════════════${NC}"
log ""
log "The .env files currently have ${RED}DEMO JWT tokens${NC}."
log ""
log "${CYAN}Real JWT tokens are generated by Kong on first start!${NC}"
log ""
log "To get your real tokens:"
log "  1. ${GREEN}After this script completes${NC}, run:"
log "     ${CYAN}docker logs supabase-kong 2>&1 | grep -E \"(anon|service_role)\"${NC}"
log ""
log "  2. Update tokens in BOTH .env files:"
log "     - $DOCKER_PATH/.env"
log "     - $PROJECT_PATH/.env"
log ""
log "  3. Restart services:"
log "     ${CYAN}./09-start-services.sh${NC}"
log ""
log "${YELLOW}═══════════════════════════════════════════════════════════${NC}"

log ""
log "${GREEN}╔════════════════════════════════════════════════════════════╗${NC}"
log "${GREEN}║            SERVICES STARTED SUCCESSFULLY                   ║${NC}"
log "${GREEN}╚════════════════════════════════════════════════════════════╝${NC}"
log ""
log "Next step: Run ${CYAN}./10-start-frontend.sh${NC}"
log ""
read -p "Press Enter to continue..."
exit 0
