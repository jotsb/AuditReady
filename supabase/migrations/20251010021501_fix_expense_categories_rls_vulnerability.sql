/*
  # Fix Critical RLS Vulnerability in expense_categories Table
  
  ## Summary
  This migration fixes a CRITICAL security vulnerability where any authenticated user
  could create, modify, or delete ALL expense categories across the entire platform.
  
  ## Changes Made
  
  ### 1. Schema Changes
  - Add `created_by` column to track category ownership
  - Set default owner to first system admin for existing categories
  - Add foreign key constraint to auth.users
  
  ### 2. Security Changes  
  - **DROP VULNERABLE POLICIES**: Remove policies that allowed global write access
  - **NEW RESTRICTIVE POLICIES**: 
    - Users can view all categories (READ-ONLY for discovery)
    - Users can ONLY create/update/delete their OWN categories
    - System admins can manage all categories (emergency override)
  
  ### 3. Impact
  - **BEFORE**: Any user could delete all categories → Platform-wide data loss
  - **AFTER**: Users isolated to own categories → Secure multi-tenant operation
  
  ## Security Notes
  - This is a BREAKING CHANGE for shared category workflows
  - Applications must update to create user-specific categories
  - System admins can still manage platform-wide categories if needed
*/

-- Step 1: Add created_by column to expense_categories
ALTER TABLE expense_categories
ADD COLUMN IF NOT EXISTS created_by uuid REFERENCES auth.users(id) ON DELETE SET NULL;

-- Step 2: Set existing categories to first system admin (or NULL if none exists)
DO $$
DECLARE
  first_admin uuid;
BEGIN
  SELECT user_id INTO first_admin
  FROM system_roles
  WHERE role = 'admin'
  ORDER BY created_at
  LIMIT 1;
  
  IF first_admin IS NOT NULL THEN
    UPDATE expense_categories
    SET created_by = first_admin
    WHERE created_by IS NULL;
  END IF;
END $$;

-- Step 3: Drop ALL existing vulnerable policies
DROP POLICY IF EXISTS "Anyone can view categories" ON expense_categories;
DROP POLICY IF EXISTS "Authenticated users can create categories" ON expense_categories;
DROP POLICY IF EXISTS "Authenticated users can update categories" ON expense_categories;
DROP POLICY IF EXISTS "Authenticated users can delete categories" ON expense_categories;

-- Step 4: Create NEW secure policies

-- SELECT: Everyone can view all categories (for dropdown lists, reports, etc.)
CREATE POLICY "Users can view all categories"
  ON expense_categories
  FOR SELECT
  TO authenticated
  USING (true);

-- INSERT: Users can only create their own categories
CREATE POLICY "Users can create own categories"
  ON expense_categories
  FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = created_by);

-- UPDATE: Users can only update their own categories, admins can update any
CREATE POLICY "Users can update own categories"
  ON expense_categories
  FOR UPDATE
  TO authenticated
  USING (
    auth.uid() = created_by OR
    is_system_admin(auth.uid())
  )
  WITH CHECK (
    auth.uid() = created_by OR
    is_system_admin(auth.uid())
  );

-- DELETE: Users can only delete their own categories, admins can delete any
CREATE POLICY "Users can delete own categories"
  ON expense_categories
  FOR DELETE
  TO authenticated
  USING (
    auth.uid() = created_by OR
    is_system_admin(auth.uid())
  );

-- Step 5: Add index for performance on ownership queries
CREATE INDEX IF NOT EXISTS idx_expense_categories_created_by
  ON expense_categories(created_by);

-- Step 6: Add comment for documentation
COMMENT ON COLUMN expense_categories.created_by IS 'User who created this category. Used for RLS ownership checks.';
